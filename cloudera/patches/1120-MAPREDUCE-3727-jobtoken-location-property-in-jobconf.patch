From 1086b02e9ea0ee22bc7c5cf438422156c4353d58 Mon Sep 17 00:00:00 2001
From: Alejandro Abdelnur <tucu@cloudera.com>
Date: Mon, 6 Feb 2012 10:40:32 -0800
Subject: [PATCH 1120/1179] MAPREDUCE-3727 jobtoken location property in jobconf refers to wrong jobtoken file.

  This backport is backporting also a portion of HADOOP-7001 (Configuration#unset method)

  Reason: Oozie Hive actions are impacted by this bug
  Author: Alejandro Abdelnur
  Ref: CDH-4232
---
 src/core/org/apache/hadoop/conf/Configuration.java |   10 +++++++++-
 src/mapred/org/apache/hadoop/mapred/JobClient.java |    6 ++++++
 .../hadoop/mapreduce/security/TokenCache.java      |   15 ++++++++++++++-
 .../org/apache/hadoop/conf/TestConfiguration.java  |    9 +++++++++
 .../hadoop/mapreduce/security/TestTokenCache.java  |   12 ++++++++++++
 5 files changed, 50 insertions(+), 2 deletions(-)

diff --git a/src/core/org/apache/hadoop/conf/Configuration.java b/src/core/org/apache/hadoop/conf/Configuration.java
index d9fa0b7..6eb0aec 100644
--- a/src/core/org/apache/hadoop/conf/Configuration.java
+++ b/src/core/org/apache/hadoop/conf/Configuration.java
@@ -461,7 +461,15 @@ public class Configuration implements Iterable<Map.Entry<String,String>>,
     getProps().setProperty(name, value);
     updatingResource.put(name, UNKNOWN_RESOURCE);
   }
-  
+ 
+  /**
+   * Unset a previously set property.
+   */
+  public synchronized void unset(String name) {
+    getOverlay().remove(name);
+    getProps().remove(name);
+  }
+ 
   /**
    * Sets a property if it is currently unset.
    * @param name the property name
diff --git a/src/mapred/org/apache/hadoop/mapred/JobClient.java b/src/mapred/org/apache/hadoop/mapred/JobClient.java
index c3bcf19..d8333aa 100644
--- a/src/mapred/org/apache/hadoop/mapred/JobClient.java
+++ b/src/mapred/org/apache/hadoop/mapred/JobClient.java
@@ -892,6 +892,12 @@ public class JobClient extends Configured implements MRConstants, Tool  {
             FileSystem.create(fs, submitJobFile,
                 new FsPermission(JobSubmissionFiles.JOB_FILE_PERMISSION));
 
+          // removing jobtoken referrals before copying the jobconf to HDFS
+          // as the tasks don't need this setting, actually they may break
+          // because of it if present as the referral will point to a
+          // different job.
+          TokenCache.cleanUpTokenReferral(jobCopy);
+
           try {
             jobCopy.writeXml(out);
           } finally {
diff --git a/src/mapred/org/apache/hadoop/mapreduce/security/TokenCache.java b/src/mapred/org/apache/hadoop/mapreduce/security/TokenCache.java
index 25ac34a..93aff6e 100644
--- a/src/mapred/org/apache/hadoop/mapreduce/security/TokenCache.java
+++ b/src/mapred/org/apache/hadoop/mapreduce/security/TokenCache.java
@@ -52,6 +52,9 @@ public class TokenCache {
   
   private static final Log LOG = LogFactory.getLog(TokenCache.class);
 
+  static final String MAPREDUCE_JOB_CREDENTIALS_BINARY = 
+    "mapreduce.job.credentials.binary";
+
   /**
    * auxiliary method to get user's secret keys..
    * @param alias
@@ -79,6 +82,16 @@ public class TokenCache {
     obtainTokensForNamenodesInternal(credentials, ps, conf);
   }
 
+  /**
+   * Remove jobtoken referrals which don't make sense in the context
+   * of the task execution.
+   *
+   * @param conf configuration object.
+   */
+  public static void cleanUpTokenReferral(Configuration conf) {
+    conf.unset(MAPREDUCE_JOB_CREDENTIALS_BINARY);
+  }
+
   static void obtainTokensForNamenodesInternal(Credentials credentials,
                                                Path [] ps, 
                                                Configuration conf
@@ -96,7 +109,7 @@ public class TokenCache {
         if (readFile) {
           readFile = false;
           String binaryTokenFilename =
-            conf.get("mapreduce.job.credentials.binary");
+            conf.get(MAPREDUCE_JOB_CREDENTIALS_BINARY);
           if (binaryTokenFilename != null) {
             Credentials binary;
             try {
diff --git a/src/test/org/apache/hadoop/conf/TestConfiguration.java b/src/test/org/apache/hadoop/conf/TestConfiguration.java
index 4bbb0d1..ff66ac5 100644
--- a/src/test/org/apache/hadoop/conf/TestConfiguration.java
+++ b/src/test/org/apache/hadoop/conf/TestConfiguration.java
@@ -774,5 +774,14 @@ public class TestConfiguration extends TestCase {
     assertTrue("Picked out wrong key " + key3, !res.containsKey(key3));
     assertTrue("Picked out wrong key " + key4, !res.containsKey(key4));
   }
+
+  public void testUnset() {
+    Configuration conf = new Configuration();
+    conf.set("foo", "bar");
+    assertNotNull(conf.get("foo"));
+    conf.unset("foo");
+    assertNull(conf.get("foo"));
+  }
+
 }
 
diff --git a/src/test/org/apache/hadoop/mapreduce/security/TestTokenCache.java b/src/test/org/apache/hadoop/mapreduce/security/TestTokenCache.java
index 98a420d..7070b0b 100644
--- a/src/test/org/apache/hadoop/mapreduce/security/TestTokenCache.java
+++ b/src/test/org/apache/hadoop/mapreduce/security/TestTokenCache.java
@@ -19,6 +19,7 @@ package org.apache.hadoop.mapreduce.security;
 
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
@@ -287,4 +288,15 @@ public class TestTokenCache {
       assertTrue("didn't find token for " + p1 ,found);
     }
   }
+
+
+  @Test
+  public void testCleanUpTokenReferral() throws Exception {
+    Configuration conf = new Configuration();
+    conf.set(TokenCache.MAPREDUCE_JOB_CREDENTIALS_BINARY, "foo");
+    TokenCache.cleanUpTokenReferral(conf);
+    assertNull(conf.get(TokenCache.MAPREDUCE_JOB_CREDENTIALS_BINARY));
+  }
+
+
 }
-- 
1.7.0.4

